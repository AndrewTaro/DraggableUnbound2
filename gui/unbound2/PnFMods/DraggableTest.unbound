(def element TestElement()
    (scope
        (var elementName:str = 'modTestDraggableElement')

        (macro DRAGGABLE_SCOPE _elementName="elementName" _defaultPosition="{positionX: 10, positionY: 10}")
    )
    
    (block
        (tf
            (class $TextDefaultBold18NM)
            (bind text "'aaaaaaaaaaaaaaaOOOOOOOWWWWWW'")
        )
        (block
            (style
                (backgroundColor = 0xffff0000)
                (width = 100px)
                (height = 100px)
            )
        )
        (style
            #(pivotX = 100%)
        )
        (macro DRAGGABLE_HANDLER _elementName="elementName")
    )
)

(def macro DRAGGABLE_SCOPE (_elementName:expression, _defaultPosition:expression)
    # Must be used along with DRAGGABLE_HANDLER
    # One element should not have more than one draggable handler/scope.

    (var __draggableEvStartDragging:str = "'evMouseDown' + _elementName")
    (var __draggableEvStopDragging:str = "'evMouseUp' + _elementName")

    (event name = "__draggableEvStartDragging")
    (event name = "__draggableEvStopDragging")

    (var __draggableEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, _elementName)")
    (var __draggableEntity:gfx = "__draggableEntityWatcher.entity" (event "__draggableEntityWatcher.event"))
    (var __draggableDataComponent:gfx = "__draggableEntity ? __draggableEntity.mods_DataComponent : null")
    (var __draggableData:dict = "__draggableDataComponent ? __draggableDataComponent.data : {}" (event "__draggableDataComponent.evDataChanged"))
    (var __isDragging:bool = "'isDragging' in __draggableData ? __draggableData.isDragging : false")

    (var __draggableStage:gfx = "$datahub.getSingleComponent(CC.stage)")

    (var __draggablePrefKeyX:str = "_elementName + '_positionX'")
    (var __draggablePrefKeyY:str = "_elementName + '_positionY'")

    (var dragPosX:number = "_defaultPosition['positionX']" watch=false)
    (var dragPosY:number = "_defaultPosition['positionY']" watch=false)

    (bind dragPosX "'dragPosX' in __draggableData ? __draggableData.dragPosX : dragPosX" init=true watch=false (event "__draggableDataComponent.evDataChanged"))
    (bind dragPosY "'dragPosY' in __draggableData ? __draggableData.dragPosY : dragPosY" init=true watch=false (event "__draggableDataComponent.evDataChanged"))

    (var __draggableMouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
    (var __draggableIsMouseActive:bool = "__draggableMouse.active" (event "__draggableMouse.evActiveChanged"))

    (bindcall externalCall 'inputMapping.onAction' "['modAddDraggable', {'elementName': _elementName, 'defaultPosition': _defaultPosition}]" init=true)
)

(def macro DRAGGABLE_HANDLER (_elementName:expression, _screenBoundsOffset:expression="{top:0, left:0, right:0, bottom:0}")
    # Register this to an element or block to make it draggable
    # One element should not have more than one draggable handler/scope.

    (dispatch "__draggableEvStartDragging"  on='mouseDown'      (bind enabled "!__isDragging"))
    (dispatch "__draggableEvStopDragging"   on='stageMouseUp'   (bind enabled "__isDragging"))

    (bindcall externalCall 'inputMapping.onAction' "['modStartDragging', {'elementName': _elementName, 'elementBounds': $globalLayoutBounds, 'elementPosition': [dragPosX, dragPosY], 'dragOffset': [$event.stageX/__draggableStage.scale - dragPosX, $event.stageY/__draggableStage.scale - dragPosY], 'screenBoundsOffset': _screenBoundsOffset}]" init=false watch=false (event "$scope[__draggableEvStartDragging]"))
    (bindcall externalCall 'inputMapping.onAction' "['modStopDragging',  {'elementName': _elementName}]" init=false watch=false (event "$scope[__draggableEvStopDragging]"))

    (bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': dragPosX + 0.00001, 'name': 'chatBoxWidth', 'subName': __draggablePrefKeyX}]" init=false watch=false (event "$scope[__draggableEvStopDragging]")(event "__draggableStage.evStageSizeChanged"))
    (bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': dragPosY + 0.00001, 'name': 'chatBoxWidth', 'subName': __draggablePrefKeyY}]" init=false watch=false (event "$scope[__draggableEvStopDragging]")(event "__draggableStage.evStageSizeChanged"))

    (style
        (position = "absolute")
        (bind left "dragPosX")
        (bind top "dragPosY")
    )

    (mc contrast_panel
		(class $FullsizeAbsolute)
		(alpha = "0.4")
		(bind visible "__draggableIsMouseActive")
        (style
            (zindex = "ZIndex.BACKGROUND")
            (hitTest = true)
        )
        (controller $Animation
            (bindcall play
                to	="{alpha: 0.4}"
                duration=0.15
                killAll=true
                (bind enabled "!__draggableIsMouseActive")
                (bind trigger "__draggableIsMouseActive")
            )
            (bindcall play
                to	="{alpha: 0.4}"
                duration=0.15
                killAll=true
                (bind enabled "__draggableIsMouseActive")
                (bind trigger "__draggableIsMouseActive")
            )
        )
	)
)