#IT IS HIGHLY RECOMMENDED "NOT" TO COPY OR REDISTRIBUTE THIS MODULE.
#THESE CODE SNIPPETS ARE ORIGINALLY WRITTEN BY AUTOSPY.
#THIS IS JUST A WORKAROUND UNTIL AUTOSPY OFICIALLY RELEASES A DRAGGABLE-HELPER-MOD.

(def element ModDraggableElement (_wndName:str, _defaults:dict, _elmSize:dict=null) layout=true
	(scope
		(var evMouseDown:str = "'evMouseDown' + _wndName")
		(var evMouseUp:str = "'evMouseUp' + _wndName")

		(event name = "evMouseDown")
		(event name = "evMouseUp")

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var stageComponent:gfx = "$datahub.getSingleComponent(CC.stage)")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var stageHeight:number = "stageComponent.height" (event "stageComponent.evStageSizeChanged"))
		(var stageScale:number = "stageComponent.scale" (event "stageComponent.evStageSizeChanged"))

		(event evDraggableMouseMove)
		(dispatch evDraggableMouseMove args={} (event "evEnterFrame") (bind enabled "isMouseActive"))
		(var mouseX:number = "round(mouse.x / stageScale)" (event "evDraggableMouseMove"))
		(var mouseY:number = "round(mouse.y / stageScale)" (event "evDraggableMouseMove"))

		(var isDragging:bool = "$event.isDragging" init=false watch=false (event "$scope[evMouseDown]") (event "$scope[evMouseUp]"))
		(bind isDragging "false" watch=false (event "mouse.evActiveChanged"))

		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var uPrefsNum:gfx = "userPrefsComponent.userPrefs.chatBoxWidth" watch=false init=false (event "userPrefsComponent.evUserPrefsChanged"))

		(macro DRAGGABLE_GET_UPREF_NUM varName = "'positionX'" wndName = "_wndName" defaults = "_defaults")
		(macro DRAGGABLE_GET_UPREF_NUM varName = "'positionY'" wndName = "_wndName" defaults = "_defaults")

		(var diffPosX:number = "mouseX - positionX" init=false watch=false (event "$scope[evMouseDown]"))
		(var diffPosY:number = "mouseY - positionY" init=false watch=false (event "$scope[evMouseDown]"))

		(var isPivotPositiveX:number = "diffPosX >= 0")
		(var isPivotPositiveY:number = "diffPosY >= 0")

		(var curPosX:number = "mouseX - diffPosX")
		(var curPosY:number = "mouseY - diffPosY")

		(var elementWidth:number = "_elmSize && 'width' in _elmSize ? _elmSize.width
																	: $globalLayoutBounds[2]"
			watch=false (event "$scope[evMouseDown]"))
		(var elementHeight:number = "_elmSize && 'height' in _elmSize	? _elmSize.height 
																		: $globalLayoutBounds[3]"
			watch=false (event "$scope[evMouseDown]"))

		(var maxStageX:number = "stageWidth  - elementWidth * isPivotPositiveX")
		(var maxStageY:number = "stageHeight - elementHeight * isPivotPositiveY")

		(var minStageX:number = "elementWidth * (!isPivotPositiveX)")
		(var minStageY:number = "elementHeight * (!isPivotPositiveY)")

		(var clampedCurPosX:number = "min(max(curPosX, minStageX), maxStageX)")
		(var clampedCurPosY:number = "min(max(curPosY, minStageY), maxStageY)")

		(dispatch "'ev' + _wndName" args = "{x: clampedCurPosX, y: clampedCurPosY}" dir=1 (bind enabled "isDragging && isMouseActive") (bind trigger "clampedCurPosX") (bind trigger "clampedCurPosY"))
	)

	(class $FullsizeAbsolute)
	(style
		(backgroundColor=0x01000000)
		(zindex = "ZIndex.BACKGROUND")
	)

	(mc contrast_panel
		(class $FullsizeAbsolute)
		(bind alpha "0.4")
		(bind visible "isMouseActive")
	)

	(controller $Animation
		(bindcall play
			#from="{alpha: 1.0}"
			to	="{alpha: 0.3}"
			duration=0.15
			killAll=true
			(bind enabled "!isMouseActive")
			(bind trigger "isMouseActive")
		)
		(bindcall play
			#from="{alpha: 0.3}"
			to	="{alpha: 1.0}"
			duration=0.15
			killAll=true
			(bind enabled "isMouseActive")
			(bind trigger "isMouseActive")
		)
	)

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': clampedCurPosX + 0.00001, 'name': 'chatBoxWidth', 'subName': _wndName + '_positionX'}]" init=false watch=false (bind trigger "isDragging"))
	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': clampedCurPosY + 0.00001, 'name': 'chatBoxWidth', 'subName': _wndName + '_positionY'}]" init=false watch=false (bind trigger "isDragging"))

	(dispatch "evMouseDown" args="{isDragging: true}"	on='mouseDown')
	(dispatch "evMouseUp"	args="{isDragging: false}"	on='stageMouseUp')
)

(def macro DRAGGABLE_GET_UPREF_NUM (wndName:expression, varName:expression, defaults:expression={})
	#!!Use DRAGGABLE_GET_UPREFS befor this!
	(var name = "varName" type=number value="isNumber(uPrefsNum[wndName + '_' + varName]) ? round(uPrefsNum[wndName + '_' + varName]) : defaults[varName]")
)

(def macro DRAGGABLE_GET_DROP_POSITION (_wndName:expression='', _defaults:expression={})
	(event name = "'ev' + _wndName")

	(var name = "'dragDropUserPrefsEntity'" type=gfx value="$datahub.getSingleEntity(CC.userPrefs)")
	(var name = "'dragDropUserPrefsNum'" type=gfx value="dragDropUserPrefsEntity.userPrefs.userPrefs.chatBoxWidth")
	(var name = "'dragPosX'" type=number value="isNumber(dragDropUserPrefsNum[_wndName + '_' + 'positionX']) ? round(dragDropUserPrefsNum[_wndName + '_' + 'positionX']) : _defaults['positionX']" watch=false)
	(var name = "'dragPosY'" type=number value="isNumber(dragDropUserPrefsNum[_wndName + '_' + 'positionY']) ? round(dragDropUserPrefsNum[_wndName + '_' + 'positionY']) : _defaults['positionY']" watch=false)

	(bind dragPosX "$event.x" init=false watch=false (event "$scope['ev' + _wndName]"))
	(bind dragPosY "$event.y" init=false watch=false (event "$scope['ev' + _wndName]"))
)