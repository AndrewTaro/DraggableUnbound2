#IT IS HIGHLY RECOMMENDED "NOT" TO COPY OR REDISTRIBUTE THIS MODULE.
#THESE CODE SNIPPETS ARE ORIGINALLY WRITTEN BY AUTOSPY.
#THIS IS JUST A WORKAROUND UNTIL AUTOSPY OFICIALLY RELEASES A DRAGGABLE-HELPER-MOD.

(def element ModDraggableElement (
		_wndName:str, _defaults:dict="{positionX: 0, positionY: 0}", _screenBoundsOffset:dict="{top:0, left:0, right:0, bottom:0}"
	) layout=true

	(scope
		(event evDraggableMouseDown)
		(event evDraggableMouseUp)
		(event evDraggableMouseMove)
		(event evDraggableMouseDisable)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var stageComponent:gfx = "$datahub.getSingleComponent(CC.stage)")
		(var stageWidth:number = "stageComponent.width" (event "stageComponent.evStageSizeChanged"))
		(var stageHeight:number = "stageComponent.height" (event "stageComponent.evStageSizeChanged"))
		(var stageScale:number = "stageComponent.scale" (event "stageComponent.evStageSizeChanged"))

		(var isDragging:bool = "false" watch=false)
		(bind isDragging "$event.isDragging" watch=false init=false (event "evDraggableMouseDown")(event "evDraggableMouseUp")(event "evDraggableMouseDisable"))

		(var mouseX:number = "$event ? round($event.x / stageScale) : 0" watch=false (event "evDraggableMouseMove")(event "evDraggableMouseDown"))
		(var mouseY:number = "$event ? round($event.y / stageScale) : 0" watch=false (event "evDraggableMouseMove")(event "evDraggableMouseDown"))

		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var uPrefsNum:gfx = "userPrefsComponent.userPrefs.chatBoxWidth" watch=false init=false (event "userPrefsComponent.evUserPrefsChanged"))

		(var prefKeyX:str = "_wndName + '_positionX'")
		(var prefKeyY:str = "_wndName + '_positionY'")
		
		(var defaultX:number = "'positionX' in _defaults ? _defaults.positionX : 100")
		(var defaultY:number = "'positionY' in _defaults ? _defaults.positionY : 100")

		(var positionX:number = "isNumber(uPrefsNum[prefKeyX]) ? round(uPrefsNum[prefKeyX]) : defaultX")
		(var positionY:number = "isNumber(uPrefsNum[prefKeyY]) ? round(uPrefsNum[prefKeyY]) : defaultY")

		(var dragOffsetX:number = "mouseX - positionX" init=false watch=false (event "evDraggableMouseDown"))
		(var dragOffsetY:number = "mouseY - positionY" init=false watch=false (event "evDraggableMouseDown"))

		(var minBoundOffsetX:number = "_screenBoundsOffset && 'left'	in _screenBoundsOffset ? _screenBoundsOffset.left  : 0")
		(var minBoundOffsetY:number = "_screenBoundsOffset && 'top'		in _screenBoundsOffset ? _screenBoundsOffset.top   : 0")
		(var maxBoundOffsetX:number = "_screenBoundsOffset && 'right'	in _screenBoundsOffset ? _screenBoundsOffset.right : 0")
		(var maxBoundOffsetY:number = "_screenBoundsOffset && 'bottom'	in _screenBoundsOffset ? _screenBoundsOffset.bottom: 0")

		(var originToPivotX:number = "positionX - $globalLayoutBounds[0]" watch=false (event "evDraggableMouseDown")) # Guaranteed to be positive
		(var originToPivotY:number = "positionY - $globalLayoutBounds[1]" watch=false (event "evDraggableMouseDown")) # Guaranteed to be positive
		
		(var pivotToBoundX:number = "$globalLayoutBounds[2] - originToPivotX" watch=false (event "evDraggableMouseDown")) # Guaranteed to be positive
		(var pivotToBoundY:number = "$globalLayoutBounds[3] - originToPivotY" watch=false (event "evDraggableMouseDown")) # Guaranteed to be positive

		(var rawDragPosX:number = "mouseX - dragOffsetX")
		(var rawDragPosY:number = "mouseY - dragOffsetY")

		(var maxStageX:number = "stageWidth  - maxBoundOffsetX - pivotToBoundX")
		(var maxStageY:number = "stageHeight - maxBoundOffsetY - pivotToBoundY")

		(var minStageX:number = "originToPivotX + minBoundOffsetX")
		(var minStageY:number = "originToPivotY + minBoundOffsetY")

		(var clampedDragPosX:number = "min(max(rawDragPosX, minStageX), maxStageX)")
		(var clampedDragPosY:number = "min(max(rawDragPosY, minStageY), maxStageY)")

		(dispatch "'ev' + _wndName" args = "{x: clampedDragPosX, y: clampedDragPosY}" dir="EventDirection.UP" (bind enabled "isDragging && isMouseActive") (bind trigger "clampedDragPosX") (bind trigger "clampedDragPosY"))
	)

	(class $FullsizeAbsolute)
	(style
		(backgroundColor=0x01000000)
		(zindex = "ZIndex.BACKGROUND")
	)

	(mc contrast_panel
		(class $FullsizeAbsolute)
		(bind alpha "0.4")
		(bind visible "isMouseActive")
	)

	(controller $Animation
		(bindcall play
			#from="{alpha: 1.0}"
			to	="{alpha: 0.3}"
			duration=0.15
			killAll=true
			(bind enabled "!isMouseActive")
			(bind trigger "isMouseActive")
		)
		(bindcall play
			#from="{alpha: 0.3}"
			to	="{alpha: 1.0}"
			duration=0.15
			killAll=true
			(bind enabled "isMouseActive")
			(bind trigger "isMouseActive")
		)
	)

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': clampedDragPosX + 0.00001, 'name': 'chatBoxWidth', 'subName': _wndName + '_positionX'}]" init=false watch=false (bind trigger "isDragging"))
	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': clampedDragPosY + 0.00001, 'name': 'chatBoxWidth', 'subName': _wndName + '_positionY'}]" init=false watch=false (bind trigger "isDragging"))

	(dispatch evDraggableMouseDown		args="{isDragging: true,	x: $event.stageX, y: $event.stageY}"	on='mouseDown')
	(dispatch evDraggableMouseUp		args="{isDragging: false}"											on='stageMouseUp')
	(dispatch evDraggableMouseMove		args="$event ? {x: $event.stageX, y: $event.stageY} : null"			on='stageMouseMove' (bind enabled "isDragging"))
	#(dispatch evDraggableMouseMove		args="{x: mouse.x, y: mouse.y}"			(event "evEnterFrame") (bind enabled "isDragging"))
	# Without $event check, log will freak out for cannot-execute-update. What's wrong with it?
	# It has something to do with (bind enabled "var") but the error disappears when you set the var to a fixed value like false or true.
	# However, as soon as you start using another variable in "var" it spits out the error.
	# It seems the very first frame after mouseDown is failing due to invalid $event data
	# I donno what to do.
	(dispatch evDraggableMouseDisable	args="{isDragging: false}" 											(event "mouse.evActiveChanged"))
)

(def macro DRAGGABLE_GET_DROP_POSITION (_wndName:expression='', _defaults:expression="{positionX:100, positionY: 100}")
	(event name = "'ev' + _wndName")

	(var name = "'dragDropUserPrefsComponent'" type=gfx value="$datahub.getSingleComponent(CC.userPrefs)")
	(var name = "'dragDropUserPrefsNum'" type=gfx value="dragDropUserPrefsComponent.userPrefs.chatBoxWidth" watch=false)
	(var name = "'dragPosX'" type=number value="isNumber(dragDropUserPrefsNum[_wndName + '_positionX']) ? round(dragDropUserPrefsNum[_wndName + '_positionX']) : _defaults['positionX']" watch=false)
	(var name = "'dragPosY'" type=number value="isNumber(dragDropUserPrefsNum[_wndName + '_positionY']) ? round(dragDropUserPrefsNum[_wndName + '_positionY']) : _defaults['positionY']" watch=false)

	(bind dragPosX "$event.x" init=false watch=false (event "$scope['ev' + _wndName]"))
	(bind dragPosY "$event.y" init=false watch=false (event "$scope['ev' + _wndName]"))
)